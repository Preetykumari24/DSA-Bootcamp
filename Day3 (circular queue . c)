#include <stdio.h>
#include <stdlib.h>
#define MAXSIZE 10  // Define the maximum size of the queue

typedef struct {
    int items[MAXSIZE];
    int front, rear;
} CircularQueue;

// Function prototypes
void enqueue(CircularQueue *q, int value);
int dequeue(CircularQueue *q);
void display(CircularQueue *q);
int isFull(CircularQueue *q);
int isEmpty(CircularQueue *q);

int main() {
    CircularQueue q;
    q.front = -1;
    q.rear = -1;

    int choice, value;

    do {
        printf("\n1. Insert\n2. Delete\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                enqueue(&q, value);
                break;
            case 2:
                dequeue(&q);
                break;
            case 3:
                display(&q);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 4);

    return 0;
}

// Function to check if the queue is full
int isFull(CircularQueue *q) {
    return ((q->front == 0 && q->rear == MAXSIZE - 1) || (q->front == q->rear + 1));
}

// Function to check if the queue is empty
int isEmpty(CircularQueue *q) {
    return (q->front == -1);
}

// Function to insert an element into the queue (enqueue)
void enqueue(CircularQueue *q, int value) {
    if (isFull(q)) {
        printf("Queue is full!\n");
        return;
    }

    if (q->front == -1)  // Initial condition when the queue is empty
        q->front = 0;

    q->rear = (q->rear + 1) % MAXSIZE;  // Circular increment for rear
    q->items[q->rear] = value;
    printf("Inserted %d\n", value);
}

// Function to remove an element from the queue (dequeue)
int dequeue(CircularQueue *q) {
    int element;
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return -1;
    } else {
        element = q->items[q->front];
        if (q->front == q->rear) {  // Queue becomes empty after this operation
            q->front = -1;
            q->rear = -1;
        } else {
            q->front = (q->front + 1) % MAXSIZE;  // Circular increment for front
        }
        printf("Deleted %d\n", element);
        return element;
    }
}

// Function to display the queue
void display(CircularQueue *q) {
    int i;
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
    } else {
        printf("Front -> %d\n", q->front);
        printf("Items -> ");
        for (i = q->front; i != q->rear; i = (i + 1) % MAXSIZE) {
            printf("%d ", q->items[i]);
        }
        printf("%d\n", q->items[i]);  // Print the last element
        printf("Rear -> %d\n", q->rear);
    }
}
